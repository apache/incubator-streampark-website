"use strict";(self.webpackChunkapache_streampark_website=self.webpackChunkapache_streampark_website||[]).push([[2990],{15213:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>m,toc:()=>l});var n=t(86070),r=t(76113);const s={id:"team",title:"Team & member Management",sidebar_position:3},i=void 0,m={id:"platform/team",title:"Team & member Management",description:"User Management",source:"@site/docs/platform/3.team.md",sourceDirName:"platform",slug:"/platform/team",permalink:"/docs/platform/team",draft:!1,unlisted:!1,editUrl:"https://github.com/apache/incubator-streampark-website/edit/dev/docs/platform/3.team.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"team",title:"Team & member Management",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"LDAP Integration",permalink:"/docs/platform/ldap"},next:{title:"Variable Management",permalink:"/docs/platform/variable"}},o={},l=[{value:"User Management",id:"user-management",level:2},{value:"Team Management",id:"team-management",level:2},{value:"Role Management",id:"role-management",level:2},{value:"Member Management",id:"member-management",level:2}];function d(e){const a={h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h2,{id:"user-management",children:"User Management"}),"\n",(0,n.jsx)(a.p,{children:"ADMIN can select the user type when creating or modifying a user. There are two user types: ADMIN and USER."}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsx)(a.li,{children:"ADMIN means the system administrator, that is: the super administrator of StreamPark, who has all the permissions of\nthe StreamPark management page and each team."}),"\n",(0,n.jsx)(a.li,{children:"USER means a normal user of the platform. Creating a USER is just creating an account. By default, users don't have\nany permissions on the platform. After account is created and the ADMIN binds it to some teams, USER will have\npermissions in the corresponding teams."}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"team-management",children:"Team Management"}),"\n",(0,n.jsx)(a.p,{children:"In order to facilitate the management of applications in different departments within the company, StreamPark supports\nteam management. ADMIN can create different teams for different departments on StreamPark."}),"\n",(0,n.jsx)("img",{src:"/doc/image/team/team_management.png"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(a.p,{children:"Users can click on the team at the top right of the platform to select a team with permission."}),"\n",(0,n.jsx)("img",{src:"/doc/image/team/change_team.png"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(a.p,{children:"A team is similar to the concept of a workspace. When a team is selected, the platform will only display the\napplications and projects of the current team. If the user has permissions in multiple teams, switching to another team\ncan view or operate the applications of the corresponding team."}),"\n",(0,n.jsx)("img",{src:"/doc/image/team/app_list.png"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(a.h2,{id:"role-management",children:"Role Management"}),"\n",(0,n.jsx)(a.p,{children:"In order to facilitate application management and prevent misoperation, the team also needs to distinguish between\nadministrator and developer, so StreamPark introduces role management."}),"\n",(0,n.jsx)(a.p,{children:"Currently, StreamPark supports two roles: team admin and developer. The team admin has all the permissions in the team.\nCompared with the team admin, the developer has fewer permissions to delete applications and add USER to the team."}),"\n",(0,n.jsx)("img",{src:"/doc/image/team/role_management.png"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(a.p,{children:"If the above roles cannot meet the requirements during use, you can also add more roles on the role management page, and\ndefine the permissions of each role."}),"\n",(0,n.jsx)(a.h2,{id:"member-management",children:"Member Management"}),"\n",(0,n.jsx)(a.p,{children:"Member management is used to maintain the mapping between users and teams, that is: which users are in each team, and\nwhat role is each user in the current team."}),"\n",(0,n.jsx)("img",{src:"/doc/image/team/member_management.png"}),"\n",(0,n.jsx)("br",{}),"\n",(0,n.jsx)(a.p,{children:"A team can have multiple users, a user can also belong to multiple teams, and can have different roles in different\nteams."}),"\n",(0,n.jsx)(a.p,{children:"For example: user_a has permissions in team1 and team2, he is developer in team1, and he is team admin in team2. That\nis, user_a is the team administrator in team2, and he has all permissions in team2, including: develop, maintain, and\ndelete applications and add other users to team2. user_a is a developer in team1, and only has permission to develop and\nmaintain applications."}),"\n",(0,n.jsx)(a.p,{children:"Note: The member management page can only view the members of the current team. If you need to view or modify the member\nmapping of other teams, please switch to other teams first."})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},76113:(e,a,t)=>{t.d(a,{R:()=>i,x:()=>m});var n=t(30758);const r={},s=n.createContext(r);function i(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function m(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);